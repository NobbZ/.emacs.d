#+LATEX_CLASS: article

#+TITLE:  NobbZ-Emacs Configuration
#+AUTHOR: Norbert Melzer
#+EMAIL:  timmelzer@gmail.com

* Foreword

A properly rendered version of this document is available at the
following places:

- PDF  :: [[https://nobbz.github.io/emacs.d/settings.pdf]]
- HTML :: [[https://nobbz.github.io/emacs.d/settings.html]]

This file is massively inspired/shamelessely stolen from the one shown
at [[https://ogbe.net/emacsconfig.html]]

Before this file is actually loaded the following =init.el= is
executed.

#+INCLUDE: "init.el" src emacs-lisp

The structure of the loading sequence as it is today can be seen in
figure [[fig:current]], while the planned way to load can be found in
figure [[fig:planned]].

#+BEGIN_SRC ditaa :file structure.png :exports: result
/----------------\
|   init.el      |
| /--------------+
| | customize.el |
| +--------------+
| | settings.org |
\-+--------------/
#+END_SRC

#+CAPTION: Current file loading structure
#+NAME: fig:current
#+RESULTS:
[[file:structure.png]]

#+BEGIN_SRC ditaa :file structure-planned.png :exports: result
/----------------\
|   init.el      |
| /--------------+
| | customize.el |
| +--------------+
| |   ~/.emacs   :
| +--------------+
| | settings.org |
\-+--------------/
#+END_SRC

#+CAPTION: Planned file loading structure
#+NAME: fig:planned
#+RESULTS:
[[file:structure.png]]

* Helpers

Small little helpers which make it easier to live-reload the config:

#+BEGIN_SRC emacs-lisp
  (defun reload-settings ()
    (interactive)
    (org-babel-load-file "~/.emacs.d/settings.org"))
  (defun settings ()
    (interactive)
    (find-file "~/.emacs.d/settings.org"))
#+END_SRC

* Packages

#+BEGIN_SRC emacs-lisp :tangle no
  (setq package-list '(use-package framemove htmlize))

;;  (unless package-archive-contents
;;    (package-refresh-contents))

  (dolist (package package-list)
    (unless (package-installed-p package)
      (package-install package)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package framemove)
#+END_SRC
** which-key

=which-key= provides a minor mode, that displays the key bindings
following your currently entered incomplete command in a pop up.

[[https://github.com/justbur/emacs-which-key]]

*** Install and load

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'which-key)
    (package-install 'which-key))
  (require 'which-key)
  (which-key-mode)
#+END_SRC

*** Configuration

1 second is a very long delay, I do think that about a tenth of a
second is enough.

#+BEGIN_SRC emacs-lisp
  (setq which-key-idle-delay 0.1)
#+END_SRC

*** Key-chords

=which-key= does not have any key-chords on its own, but I will enter
some global stuff here.

#+BEGIN_SRC emacs-lisp
  (which-key-add-key-based-replacements
    "C-x C-f" "Open file"
    "C-x C-s" "Save file")
#+END_SRC
** project-explorer
=project-explorer= is a tree explorer.

[[https://github.com/sabof/project-explorer]]
*** Install and load

We are only allowed to load =project-explorer= when in interactive mode.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'project-explorer)
    (package-install 'project-explorer))
  (unless noninteractive
    (require 'project-explorer))
#+END_SRC
*** Configuration
There is nothing special to configure right now.
*** TODO Key-chords

** Puppet-Mode

=puppet-mode= does provide syntax-highlighting, alignemt and
navigation for puppet-code.

[[https://github.com/lunaryorn/puppet-mode]]

*** Install and load

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'puppet-mode)
    (package-install 'puppet-mode))
#+END_SRC

Also we want to open =Puppetfile=s in =ruby-mode=.

#+BEGIN_SRC emacs-lisp
  (add-to-list
   'auto-mode-alist '("\\`Puppetfile\\'" . ruby-mode))
#+END_SRC

*** Configuration

We need to alter the =puppet-lint-command= a bit to have it actually
work in our projects.

#+BEGIN_SRC emacs-lisp
  (setq puppet-lint-command "puppet-lint --no-autoloader_layout-check --with-context --log-format \"%{path}:%{line}: %{kind}: %{message} (%{check})\"")
#+END_SRC


*** Key-Chords

#+BEGIN_SRC emacs-lisp
  (which-key-add-major-mode-key-based-replacements 'puppet-mode
    "C-c C-a" "Align parameters"
    "C-c C-'" "Toggle quoting"
    "C-c C-;" "Blank string"
    "C-c C-j" "Jump to"
    "C-c C-c" "dry-run"
    "C-c C-v" "Validate syntax"
    "C-c C-l" "Check semantic")
#+END_SRC
** haskell-mode

=haskell-mode= does provide syntax-highlighting, alignment and
navigation for haskell source code.

[[http://haskell.github.io/haskell-mode/]]

*** Install and load
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'haskell-mode)
    (package-install 'haskell-mode))
#+END_SRC
* TODO Security
* Appearance, UI Elements, and the Emacs server

First start a server and then set some important appearance
settings. Note that some of the settings are in [[file:init.el][=init.el=]].

** The server

Start the server if not already running.

#+BEGIN_SRC emacs-lisp
  (load "server")
  (unless (server-running-p) (server-start))
#+END_SRC

When connected to a server using =emacsclient=, we want to kill the
client using ~C-x k~, the way it seems natural.

#+BEGIN_SRC emacs-lisp
  (add-hook 'server-switch-hook
            (lambda ()
              (when (current-local-map)
                (use-local-map (copy-keymap (current-local-map))))
              (local-set-key (kbd "C-x k") 'server-edit)))
#+END_SRC

** Appearance

*** Theme & Faces

#+BEGIN_SRC emacs-lisp
  (load-theme 'wheatgrass) ;; A nice dark theme
  (set-face-attribute 'default nil :height 100) ;; 10pt font height
;;  (set-face-attribute 'default nil :family "Consolas")
  (set-face-attribute 'fringe  nil :background "#2d2d2d")
  (set-face-attribute 'font-lock-comment-face nil :slant 'italic :weight 'semibold)
  ;; (set-fontset-font "fontset-default" 'unicode "DejaVu Sans Mono for Powerline")

  (global-hl-line-mode t)
#+END_SRC

We want to use =FiraCode= if possible by any means.

#+BEGIN_SRC emacs-lisp
  (when (window-system)
    (set-default-font "Fira Code"))
  ;; (let ((alist '((33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
  ;;                (35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
  ;;                (36 . ".\\(?:>\\)")
  ;;                (37 . ".\\(?:\\(?:%%\\)\\|%\\)")
  ;;                (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
  ;;                (42 . ".\\(?:\\(?:\\*\\*/\\)\\|\\(?:\\*[*/]\\)\\|[*/>]\\)")
  ;;                (43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
  ;;                (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
  ;;                (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)")
  ;;                (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
  ;;                (48 . ".\\(?:x[a-zA-Z]\\)")
  ;;                (58 . ".\\(?:::\\|[:=]\\)")
  ;;                (59 . ".\\(?:;;\\|;\\)")
  ;;                (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
  ;;                (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
  ;;                (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
  ;;                (63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
  ;;                (91 . ".\\(?:]\\)")
  ;;                (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
  ;;                (94 . ".\\(?:=\\)")
  ;;                (119 . ".\\(?:ww\\)")
  ;;                (123 . ".\\(?:-\\)")
  ;;                (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
  ;;                (126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)"))))
  ;;   (dolist (char-regexp alist)
  ;;     (set-char-table-range composition-function-table
  ;;                           (car char-regexp)
  ;;                           `([,(cdr char-regexp) 0 font-shape-gstring]))))
#+END_SRC

*** UI Elements

Get rid of that ugly disturbing stuff no one needs…

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (when (display-graphic-p)
    (tool-bar-mode -1)
    (scroll-bar-mode -1))
#+END_SRC

*** Welcome Screen

We also want to get rid of the splash screen and start into home
directory.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq inhibit-splash-screen t)
  (setq initial-scratch-message nil)
#+END_SRC

*** TODO Window Geometry

*** TODO Scrolling

I need to find out how to let emacs behave as with =spacemacs=
=smoothscrolling= setting.

#+BEGIN_SRC emacs-lisp

#+END_SRC

* Encoding

Most of the time I want to have =UTF-8= as my file encoding.

#+BEGIN_SRC emacs-lisp
  (set-language-environment "UTF-8")
#+END_SRC

* Pathes

** Autosave and Backup

Autosaves directly beneath the edited files do clutter up the
sourcetree. Instead let's throw them inside =~/tmp/=.

#+BEGIN_SRC emacs-lisp
  (defvar backup-dir   (expand-file-name "~/tmp/emacs_backup/"))
  (defvar autosave-dir (expand-file-name "~/tmp/emacs_autosave/"))

  (setq backup-directory-alist (list (cons ".*" backup-dir)))
  (setq auto-save-list-file-prefix autosave-dir)
  (setq auto-save-file-name-transforms `((".*" ,autosave-dir t)))
  (setq tramp-backup-directory-alist backup-directory-alist)
  (setq tramp-auto-save-directory autosave-dir)
#+END_SRC

** TODO Dropbox

We need to know the basepath of dropbox.

The current function to read the path from =dropbox=' config is very
ugly and needs some care to make it more beautiful.

#+BEGIN_SRC emacs-lisp :noweb yes
  <<find-dropbox-folder-elisp>>
  (defvar dropbox-base-path (find-dropbox-folder))
#+END_SRC

#+NAME: find-dropbox-folder-elisp
#+BEGIN_SRC emacs-lisp :tangle no :exports none
  (require 'json)

  (defun find-dropbox-folder ()
    (interactive)
    (let ((json-path (if (eq system-type 'gnu/linux)
                         (expand-file-name "~/.dropbox/info.json")
                       (concat (getenv "APPDATA") "\\..\\Local\\Dropbox\\info.json"))))
      (cdr (assoc 'path (car (json-read-file json-path))))))
#+END_SRC

* Window Movement

Use Shift-<Arrow> to navigate through windows.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'framemove)
    (package-install 'framemove))
  (require 'framemove)
  (windmove-default-keybindings)
  (setq framemove-hook-into-windmove t)
#+END_SRC

* Debugging

Setup some keys to make it easier to use GUD.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f7>") 'gud-cont)
  (global-set-key (kbd "<f6>") 'gud-step)
  (global-set-key (kbd "<f5>") 'gud-next)
  (global-set-key (kbd "<f8>") 'gud-finish)
#+END_SRC

* Traiiling Whitespace

We want to see trailing whitespace, since it is the devil.

#+BEGIN_SRC emacs-lisp
  (require 'whitespace)
  (setq-default show-trailing-whitespace t)
#+END_SRC

** But do not display in some modes

#+BEGIN_SRC emacs-lisp
  (defun no-trailing-whitespace ()
    (setq show-trailing-whitespace nil))
#+END_SRC

Add a line for each mode:

#+BEGIN_EXAMPLE
(add-hook 'buffer-mode-hook 'no-trailing-whitespace)
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
  (add-hook 'minibuffer-setup-hook 'no-trailing-whitespace)
  (add-hook 'term-mode-hook        'no-trailing-whitespace)
#+END_SRC
* TODO Dired

** General Settings

The dirst two lines stop dired from asking me if I really want to
recursively delete/copy directories. I never answer "no" to that
question.

The other lines enable "Do What I Mean" mode for dired, using the
other buffers location as target when copying in split-screen mode.

#+BEGIN_SRC emacs-lisp
  (setq dired-recursive-copies 'always)
  (setq dired-recursive-deletes 'always)
  (setq dired-dwim-target t)
  (setq dired-listing-switches "-alh")
#+END_SRC
* Org-Mode

[[http://orgmode.org/][org-mode]] might be THE killer app for emacs.

** Installation

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :defer t
    :pin org)
#+END_SRC

** General settings

Some general settings for org.

#+BEGIN_SRC emacs-lisp
  (require 'org)
  (setq-default
   org-return-follows-link t
   org-image-actual-width '(400)
   org-highlight-latex-and-related '(latex script entities))
  (add-hook 'org-mode-hook 'turn-on-auto-fill)
#+END_SRC

** Allow execution of src-blocks

First we need an empty list

#+BEGIN_SRC emacs-lisp
  (setq nobbz-babel-languages-alist '())
#+END_SRC

*** \LaTeX

#+BEGIN_SRC emacs-lisp
  (require 'ob-latex)
  (add-to-list 'nobbz-babel-languages-alist '(latex . t))
#+END_SRC

*** Emacs-Lisp

#+BEGIN_SRC emacs-lisp
  (add-to-list 'nobbz-babel-languages-alist '(emacs-lisp . t))
#+END_SRC

*** Ditaa

#+BEGIN_SRC emacs-lisp
  (add-to-list 'nobbz-babel-languages-alist '(ditaa . t))
#+END_SRC

*** Applying the stuff

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   nobbz-babel-languages-alist)
#+END_SRC

#+BEGIN_SRC ditaa :file hello-world.png
  +--------------+
  | Hello World! |
  +--------------+
#+END_SRC

#+RESULTS:
[[file:images/hello-world.png]]

*** Execution security

#+BEGIN_SRC emacs-lisp
  (defun nobbz-org-confirm-babel-evaluate (lang body)
    (not (string= lang "ditaa"))) ; don't ask for ditaa
  (setq org-confirm-babel-evaluate 'nobbz-org-confirm-babel-evaluate)
#+END_SRC

** Syntax-Highlighting in sourceblocks

This is a very important feature in an org-document. Also adds native
~<tab>~ behaviour in those blocks.

#+BEGIN_SRC emacs-lisp
  (setq
   org-src-fontify-natively t
   org-src-tab-acts-natively t)
#+END_SRC

** HTML Export

There shall be a custom stylesheet for HTML export.

#+BEGIN_SRC emacs-lisp
  (require 'ox-html)
  (setq org-html-htmlize-output-type 'inline-css)
#+END_SRC

** PDF-Export

Use minted as a highlighter.

#+BEGIN_SRC emacs-lisp
  (require 'ox-latex)
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)
#+END_SRC

Also we want to use =latexmk= as the build-manager and =lualatex= as
the engine.

#+BEGIN_SRC emacs-lisp
  (setq org-latex-pdf-process
        '("latexmk -lualatex -f -shell-escape %f"))
#+END_SRC

** Agenda

We want to have this file itself on our agenda.

#+BEGIN_SRC emacs-lisp
  (setq org-default-notes-file (concat dropbox-base-path "/Dokumente/org/TODO.org"))
  (add-to-list 'org-agenda-files (concat dropbox-base-path "/Dokumente/org/TODO.org"))
  (add-to-list 'org-agenda-files "~/.emacs.d/settings.org")
#+END_SRC

Also, we do need to have some additional convinience functions which
help to find the various agenda related files.

#+BEGIN_SRC emacs-lisp
  (defun open-todo ()
    (interactive)
    (find-file (concat dropbox-base-path "/Dokumente/org/TODO.org")))
  (defun open-timing ()
    (interactive)
    (find-file (concat dropbox-base-path "/Dokumente/org/time-sheet.org")))
#+END_SRC
